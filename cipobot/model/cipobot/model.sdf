<?xml version='1.0'?>
<sdf version='1.4'>
  <model name="cipobot">
    <static>false</static>
    <link name='chassis'>
      <!-- Calculate the inertia of a box -->
      <!-- <xacro:macro name="box_inertial" params="x y z mass">
        <inertial>
          <mass value="${mass}" />
          <origin xyz="0 0 0" />
          <inertia ixx="${0.0833333 * mass * (y*y + z*z)}" ixy="0.0" ixz="0.0"
            iyy="${0.0833333 * mass * (x*x + z*z)}" iyz="0.0"
            izz="${0.0833333 * mass * (x*x + y*y)}" />
        </inertial>
      </xacro:macro> -->
      <inertial>
        <pose>0 0 0 0 0 0</pose>
        <mass>0.5</mass>
        <inertia>
          <ixx>0.00283333</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.00708333</iyy>
          <iyz>0</iyz>
          <izz>0.00833333</izz>
        </inertia>
      </inertial>
      <pose>0 0 .1 0 0 0</pose>

      <collision name='collision'>
        <geometry>
          <box>
            <size>.4 .2 .1</size>
          </box>
        </geometry>
      </collision>

      <visual name='visual'>
        <geometry>
          <box>
            <size>.4 .2 .1</size>
          </box>
        </geometry>
      </visual>

      <collision name='caster_collision'>
        <pose>-0.15 0 -0.05 0 0 0</pose>
        <geometry>
            <sphere>
            <radius>.05</radius>
          </sphere>
        </geometry>

        <surface>
          <friction>
            <ode>
              <mu>0</mu>
              <mu2>0</mu2>
              <slip1>1.0</slip1>
              <slip2>1.0</slip2>
            </ode>
          </friction>
        </surface>
      </collision>

      <visual name='caster_visual'>
        <pose>-0.15 0 -0.05 0 0 0</pose>
        <geometry>
          <sphere>
            <radius>.05</radius>
          </sphere>
        </geometry>
      </visual>
    </link>
    <link name="left_wheel">
      <!-- Calculate the inertia of a cylinder -->
      <!-- <xacro:macro name="cylinder_inertial" params="radius length mass">
        <inertial>
          <mass value="${mass}" />
          <origin xyz="0 0 0" />
          <inertia ixx="${0.0833333 * mass * (3 * radius * radius + length * length)}" ixy="0.0" ixz="0.0"
            iyy="${0.0833333 * mass * (3 * radius * radius + length * length)}" iyz="0.0"
            izz="${0.5 * mass * radius * radius}" />
        </inertial>
      </xacro:macro> -->
      <inertial>
        <pose>0 0 0 0 0 0</pose>
        <mass>0.3</mass>
        <inertia>
          <ixx>0.0008125</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.0008125</iyy>
          <iyz>0</iyz>
          <izz>0.0015</izz>
        </inertia>
      </inertial>
      <pose>0.1 0.13 0.1 0 1.5707 1.5707</pose>
      <collision name="collision">
        <geometry>
          <cylinder>
            <radius>.1</radius>
            <length>.05</length>
          </cylinder>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <cylinder>
            <radius>.1</radius>
            <length>.05</length>
          </cylinder>
        </geometry>
      </visual>
    </link>
    <link name="right_wheel">
      <!-- Calculate the inertia of a cylinder -->
      <!-- <xacro:macro name="cylinder_inertial" params="radius length mass">
        <inertial>
          <mass value="${mass}" />
          <origin xyz="0 0 0" />
          <inertia ixx="${0.0833333 * mass * (3 * radius * radius + length * length)}" ixy="0.0" ixz="0.0"
            iyy="${0.0833333 * mass * (3 * radius * radius + length * length)}" iyz="0.0"
            izz="${0.5 * mass * radius * radius}" />
        </inertial>
      </xacro:macro> -->
      <inertial>
        <pose>0 0 0 0 0 0</pose>
        <mass>0.3</mass>
        <inertia>
          <ixx>0.0008125</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>0.0008125</iyy>
          <iyz>0</iyz>
          <izz>0.0015</izz>
        </inertia>
      </inertial>
      <pose>0.1 -0.13 0.1 0 1.5707 1.5707</pose>
      <collision name="collision">
        <geometry>
          <cylinder>
            <radius>.1</radius>
            <length>.05</length>
          </cylinder>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <cylinder>
            <radius>.1</radius>
            <length>.05</length>
          </cylinder>
        </geometry>
      </visual>
    </link>
    <joint type="revolute" name="left_wheel_hinge">
      <pose>0 0 -0.03 0 0 0</pose>
      <child>left_wheel</child>
      <parent>chassis</parent>
      <axis>
        <xyz>0 1 0</xyz>
      </axis>
    </joint>

    <joint type="revolute" name="right_wheel_hinge">
      <pose>0 0 0.03 0 0 0</pose>
      <child>right_wheel</child>
      <parent>chassis</parent>
      <axis>
        <xyz>0 1 0</xyz>
      </axis>
    </joint>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">

      <!-- Plugin update rate in Hz -->
      <updateRate>${update_rate}</updateRate>

      <!-- Name of left joint, defaults to `left_joint` -->
      <leftJoint>left_wheel_hinge</leftJoint>

      <!-- Name of right joint, defaults to `right_joint` -->
      <rightJoint>right_wheel_hinge</rightJoint>

      <!-- The distance from the center of one wheel to the other, in meters, defaults to 0.34 m -->
      <wheelSeparation>0.26</wheelSeparation>

      <!-- Diameter of the wheels, in meters, defaults to 0.15 m -->
      <wheelDiameter>0.2</wheelDiameter>

      <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 -->
      <wheelAcceleration>1.0</wheelAcceleration>

      <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm -->
      <wheelTorque>20</wheelTorque>

      <!-- Topic to receive geometry_msgs/Twist message commands, defaults to `cmd_vel` -->
      <commandTopic>cmd_vel</commandTopic>

      <!-- Topic to publish nav_msgs/Odometry messages, defaults to `odom` -->
      <odometryTopic>odom</odometryTopic>

      <!-- Odometry frame, defaults to `odom` -->
      <odometryFrame>odom</odometryFrame>

      <!-- Robot frame to calculate odometry from, defaults to `base_footprint` -->
      <robotBaseFrame>base_footprint</robotBaseFrame>

      <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
      <odometrySource>1</odometrySource>

      <!-- Set to true to publish transforms for the wheel links, defaults to false -->
      <publishWheelTF>true</publishWheelTF>

      <!-- Set to true to publish transforms for the odometry, defaults to true -->
      <publishOdom>true</publishOdom>

      <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false -->
      <publishWheelJointState>true</publishWheelJointState>

      <!-- Set to true to swap right and left wheels, defaults to true -->
      <legacyMode>false</legacyMode>
    </plugin>
  </model>
</sdf>
